multivari interlac polynomi polynomi integ coeffici follow sokal sok call multivari polynomi indetermin … associ vertic consid graph denot set indetermin g index indetermin denot set ”ordinary” indetermin associ element graph polynomi mean map associ graph polynomi isomorph onto obtain substitut replac everi special substitut substitut replac indetermin finit set polynomi index indetermin polynomi exampl substitut replac everi vertex everi graph special substitut defin sens polynomi set vertic let abbrevi product order commut indetermin set subset polynomi describ exact multiset set describ number occurr definit multivari interlac polynomi graph defin rang subset henc interlac polynomi ab b obtain substitut substitut polynomi avh defin graph without loop substitut polynomi actual defin recurs articl rais problem well defined prove equal polynomi clariti variabl name write variabl instead henc substitut substitut let polynomi obtain replac lemma everi graph everi set vertic proof clear observ result follow write polynomi thus ”recovered” sinc everi graph without loop lemma henc enough know graph without loop howev recurs definit consid introduc graph loop recurs call properti polynomi polynomi defin satisfi properti graph equal hold answer consequ next proposit also see counter exampl proposit graph polynomi reconstruct proof everi set vertic rank uniqu integ monomi vertex loop loop henc obtain use inform reconstruct edg loop adjac iff otherwis one loop adjac iff otherwis loop adjac iff otherwis proof show strang behaviour rank function graph follow ident cannot hold even question algebra transform express term uniform way valid graph recurs definit determin recurs definit also call set reduct formula follow recurs definit ab avh let denot graph one non loop vertex similar graph loop vertex lemma everi graph everi graph disjoint proof easi verif definit complic task consist express case adjac necessari rule lemma applic distinguish three case graph disjoint set vertic let denot monomi noth sum pair condit assum use notat distinct vertic two disjoint set contain accord case let mean vertex respect let sum monomi tell tell exampl sum monomi claim let proof clear definit monomi form subscript lemma use lemma henc follow set pair disjoint coincid set pair disjoint subset proof similar monomi form subscript lemma loop lemma clear henc follow set pair disjoint coincid set pair disjoint subset case obtain exchang monomi form lemma henc follow set pair disjoint coincid set pair disjoint case obtain similarili exchang next claim establish linear relat polynomi claim let proof clear definit definit sum monomi lemma give result usual argument similar exchang collect equal claim definit linear equal ”unknowns” enough obtain get thus obtain reorgan express bit factor lemma let consid two express get corollari let next consid case actual lemma shorten comput lemma let let proof lemma applic get let substitut exchang occurr indetermin index occurr indetermin index similar remark appli final lemma lemma similar argument sum result lemma follow proposit three case collect singl one help littl trick introduc ”metavariables” loop loop proposit everi graph everi graph disjoint everi vertex proof immedi consequ lemma even shorter definit corollari everi graph everi vertex counter exampl prove proposit ab b true take note augment assum would left handsid singl monomi form must monomi right handsid monomi henc cannot equal case ask less special general substitut correspond equal true answer given prove actual complic ident proposit proof use notat fact claim let denot polynomi relat instead lemma hand sum monomi disjoint set henc use lemma lemma also henc collect remark get note later use ident counter exampl hold either polynomi said posit coeffici monomi posit polynomi sens map graph polynomi posit posit everi graph clear definit posit immedi recurs definit corollari two substract right handsid howev one deriv corollari stronger statement immedi definit proposit everi graph everi vertex polynomi posit proof induct number vertic one prove simultan two assert use corollari case case give induct hypothesi posit sinc induct posit
