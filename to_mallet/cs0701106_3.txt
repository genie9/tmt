observ semant one interest section semant full trace call ”observ semantics” trace explain anyth collect fact question aris howev understand trace one need two level semant first level correspond descript action object appear paramet attribut trace e semant observ data second level correspond kind trace “explanation” e semant describ valu paramet moment deriv valu paramet moment action select clear mean one model process accur describ evolut trace two event form semant subject anoth work progress “to read” trace one need first level semant relat paramet state attribut emit trace event must known exampl prolog trace properti object ”proof tree” must known understand relat depth tree tree semant trace full increment thus contain descript relat paramet relat semant produc attribut understand trace comprehens necessari go knowledg process call ”observ semantics” os semant tracer first semant although part os seen like “semant trace” use semant object action full trace seen abstract semant sens cousot kind natur semant express finit set rule form event trace obtain start state action applic rule os set action perform chrono denot semant take form structur oper semant evolv algebra less refin ”big step” ”small step” fact tempt complet semant tracer order allow clear implement come back exampl prolog tracer augment trace constraint resolut proof tree search tree label tree propag call codein implement manner gnu prolog abstract model defin implement sever solver made possibl meet two princip object portabl analyz whose input data base full trace robust tracer whose implement guid improv good methodolog approach base pre specifi rigor semant use howev note complet semant trace would complet formal observ process almost imposs practic degre refin would impli exampl attribut includ mani trace cpu time consum process sinc ”beginning” trace emiss formal variat fact issu host system would amount introduc observ semant model system process execut final os confus complet oper semant would make possibl recal cours process start sole initi state rule current full state suffici know rule may appli exampl model develop finit domain constraint resolut describ contain set oper rule least one rule appli state whose condit alway precis enough decid appli back rule depict figur back rule abstract model prolog proof tree display contain condit must satisfi mean new current node belong search tree noth say node must select sole knowledg full current state includ current search tree suffici knowledg current trace event necessari know new node thus know rule fact instanti
