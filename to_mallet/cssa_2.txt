practic theorem say store ssas human chromosom chri fa fasta format million charact alphabet size shrimp three default space seed — e — mb addit sa wherea store ssas naïv would take mb store ssas pack entri take bit would reduc mb test approach built ssas describ section comput ssa store copi wavelet tree chose wavelet tree simpl use often practic theoret smaller faster data structur mention section ran test describ section comput quad core intel xeon cpu gb ram run ubuntu use wavelet tree implement https github com fclaud libcd compil gnu g version optim flag uncompress sa took mb six wavelet tree took total mb perform random access microsecond per access compress ssas space would take store naïv although access much slower direct memori access fast compar disk access thus approach seem like use set ssas slight larger memori fit compress use test setup compress ssas ten space seed bfast tabl use base pair illumina read weight sinc first seed consist ssa would build sa uncompress sa took mb wavelet tree nine seed took total mb — instead gb use mb ten seed — togeth perform random access ten ssas microsecond per access left side top half figur show mani bit per charact bpc text ssa took averag time per access ssa also compress ssas ten space seed bfast use base pair illumina read weight first seed consist time wavelet tree nine seed took total mb access took microsecond left side bottom half figur show mani bit per charact text ssa took averag access time per access ssa permut store permut store relat use idea section exampl store ssas relat ssas suppos consid size ssa except sa compress relat ssa includ sa build minimum span tree root sa compress ssa relat parent tree reduc space usag cost increas random access time shown bfast seed right side figur space time seed bpc space time seed refer bpc space time seed bpc space time seed refer bpc space usag ssas space seed bfast use illumina read bit per charact text averag time random access top seed base pair read bottom seed base pair read left ssas compress relat sa right ssas compress relat ssas circumst ignor ssas semant consid permut exampl space seed general subset seed ternari string indic posit charact must match indic posit need ts indic posit charact must fall within equival class pyrimidin c purin g difficult general theorem subset seed — full version paper — also necessari obtain practic result iedera tool avail http bioinfo lifl fr yass iedera php generat good subset seed challeng chang fix length seed repetit seed repetit seed string whose repetit digit indic charact must match exampl respect repetit space seed atcgatcggt match accgttggga accgttgaga repetit seed use look approxim match substr extend becom suffici infrequ clear extend theorem repetit seed nevertheless last tool avail http last cbrc jp generat ssas repetit space subset seed still tri compress practic see also current goal achiev reason compress access time set repetit subset seed receiv martin frith averag length averag weight count “same equival class” digit unfortun moment use near bit per entri correspond ssas includ overhead uncompress sa margin better bit would use simpl pack meanwhil random access take microsecond averag signific slower access pack array hand seed unusu low averag weight length ratio use iedera last generat ssas set eight repetit subset seed averag length averag weight use bit per entri random access take microsecond averag
